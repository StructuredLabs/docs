openapi: 3.0.1
info:
  title: 'Tickets API'
  description: 'API for managing tickets.'
  version: '1.0.0'
servers:
  - url: 'http://api.structuredlabs.com'
security:
  - bearerAuth: []

paths:
  /tickets:
    get:
      summary: 'Get All Tickets'
      description: 'Retrieves all tickets.'
      operationId: 'getAllTickets'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                # { workspaceId, userId }
                workspaceId:
                  type: 'string'
                  description: 'The workspace ID for the tickets.'
                userId:
                  type: 'string'
                  description: 'The user ID for the tickets.'
      responses:
        '200':
          description: 'Successfully retrieved all tickets.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  tickets:
                    type: 'array'
                    items:
                      $ref: '#/components/schemas/Ticket'
                  success:
                    type: 'boolean'
    post:
      summary: 'Create a Ticket'
      description: 'Creates a new ticket.'
      operationId: 'createTicket'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # userId, workspaceId, ticket
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  description: 'The user ID of the ticket creator.'
                workspaceId:
                  type: 'string'
                  description: 'The workspace ID for the ticket.'
                ticket:
                  $ref: '#/components/schemas/Ticket'
      responses:
        '200':
          description: 'Successfully created a ticket.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
    delete:
      summary: 'Delete a Ticket'
      description: 'Deletes a ticket.'
      operationId: 'deleteTicket'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # userId, workspaceId, ticketId
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  description: 'The user ID of the ticket creator.'
                workspaceId:
                  type: 'string'
                  description: 'The workspace ID for the ticket.'
                ticketId:
                  type: 'string'
                  description: 'The ID of the ticket to delete.'
      responses:
        '200':
          description: 'Successfully deleted a ticket.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'

  /tickets/column:
    put:
      summary: 'Update Column Name'
      description: 'Updates the column name for a ticket.'
      operationId: 'updateTicketColumn'
      # userId, workspaceId, newColumnName, oldColumnName
      # params
      parameters:
        - name: 'userId'
          in: 'query'
          description: 'The user ID of the ticket creator.'
          required: true
          schema:
            type: 'string'
        - name: 'workspaceId'
          in: 'query'
          description: 'The workspace ID for the ticket.'
          required: true
          schema:
            type: 'string'
        - name: 'newColumnName'
          in: 'query'
          description: 'The new column name.'
          required: true
          schema:
            type: 'string'
        - name: 'oldColumnName'
          in: 'query'
          description: 'The old column name.'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'Successfully updated the ticket column.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
    delete:
      summary: 'Delete Column'
      description: 'Deletes a column from the ticket board.'
      operationId: 'deleteTicketColumn'
      # userId, workspaceId, columnName
      # params
      parameters:
        - name: 'userId'
          in: 'query'
          description: 'The user ID of the ticket creator.'
          required: true
          schema:
            type: 'string'
        - name: 'workspaceId'
          in: 'query'
          description: 'The workspace ID for the ticket.'
          required: true
          schema:
            type: 'string'
        - name: 'columnName'
          in: 'query'
          description: 'The column name to delete.'
          required: true
          schema:
            type: 'string'
      responses:
        '200':
          description: 'Successfully deleted the ticket column.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
  
  /tickets/comments:
    post:
      summary: 'Create a Comment'
      description: 'Creates a new comment for a ticket.'
      operationId: 'createComment'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              # userId, workspaceId, ticketId, comment
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  description: 'The user ID of the comment creator.'
                workspaceId:
                  type: 'string'
                  description: 'The workspace ID for the ticket.'
                comment:
                  type: 'object'
                  properties:
                    # {  id: string;  ticketId: string;  userId: string;  content: string;  createdDate: string;}
                    id:
                      type: 'string'
                    ticketId:
                      type: 'string'
                    userId:
                      type: 'string'
                    content:
                        type: 'string'
                    createdDate:
                      type: 'string'
      responses:
        '200':
          description: 'Successfully created a comment.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  success:
                    type: 'boolean'
    get:
      summary: 'Get All Comments'
      description: 'Retrieves all comments for a ticket.'
      operationId: 'getAllComments'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: 'object'
              properties:
                userId:
                  type: 'string'
                  description: 'The user ID of the comment creator.'
                workspaceId:
                  type: 'string'
                  description: 'The workspace ID for the comments.'
                ticketId:
                  type: 'string'
                  description: 'The ticket ID for the comments.'
      responses:
        '200':
          description: 'Successfully retrieved all comments.'
          content:
            application/json:
              schema:
                type: 'object'
                properties:
                  comments:
                    type: 'array'
                    items:
                      type: 'object'
                      properties:
                        # {  id: string;  ticketId: string;  userId: string;  content: string;  createdDate: string;}
                        id:
                          type: 'string'
                        ticketId:
                          type: 'string'
                        userId:
                          type: 'string'
                        content:
                            type: 'string'
                        createdDate:
                          type: 'string'
                  success:
                    type: 'boolean'

components:
  schemas:
    Ticket:
      type: 'object'
      properties:
        id:
          type: 'string'
        title:
          type: 'string'
        status:
          type: 'string'
        labels:
          type: 'array'
          items:
            type: 'string'
        owner:
          type: 'string'
        description:
          type: 'string'
        createdDate:
          type: 'string'
        dueDate:
          type: 'string'
        workspaceId:
          type: 'string'
    